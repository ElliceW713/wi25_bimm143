---
title: "Lab 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Ellice Wang (PID: A16882742)"
format: pdf
date: February 18, 2025
toc: True
---

## 1. Background

We will analyze RNA-Seq data from four different ASM cell lines treated with dexamethasone glucocorticoid. 

## 2. Bioconductor setup

Used *install.packages("BiocManager")* and *BiocManager::install()* to install then *BiocManager::install("DESeq2")* to install DESeq2, which is a package commonly used for differential gene analysis. 

```{r}
library(BiocManager)
library(DESeq2)
```

## 3. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

head(counts)
head(metadata)
```
> Q1. How many genes are in this dataset?

There are 38,694 genes in this dataset.

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have?

There are 4 control cell lines. 

```{r}
length(grep("control",metadata$dex))
```

## 4. Toy differential gene expression

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

Instead of using "rowSums(control.counts)/4", I could use "rowMeans(control.counts)". That way if more controls were added, the "/4" does not need to be adjusted. 

```{r}
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowMeans(control.counts)
head(control.mean)
```


> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

```{r}
# combine mean counts
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(control.mean, treated.mean, 
     xlab = "Control", ylab = "Treated")
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

I would use "geom_point()" for this plot.

```{r}
library(ggplot2)

ggplot(data=meancounts, aes(control.mean, treated.mean)) + 
  geom_point()
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

The argument to plot() is "log" and I set it to both axes. 

```{r}
plot(control.mean, treated.mean, 
     xlab = "log Control", ylab = "log Treated", log="xy")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)

zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The purpose of the arr.ind argument is to know whether or not array indices should be returned when x is an array. In this case, it keeps the gene names which have a value of 0. We take the first column of the output because those are the gene names (kept from arr.ind), and unique is used to get all of the possible gene names in the dataset to remove for later on. 

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

250 up regulated genes are at a greater than 2 fold change level. 

```{r}
sum(up.ind)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

367 down regulated genes are greater than the 2 fold change level. 

```{r}
sum(down.ind)
```

> Q10. Do you trust these results? Why or why not?

I don't quite trust these results because we need more information about the statistical significance of these results and whether or not the > 2 fold change is reliable or not. 

## 5. Setting up for DESeq2

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

## 6. Principal Component Analysis (PCA)

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

## 7. DESeq analysis

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

## 8. Adding annotation data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",
                     column="ENTREZID",
                     multiVals="first")
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",
                     column="UNIPROT",
                     multiVals="first")
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     keytype="ENSEMBL",
                     column="GENENAME",
                     multiVals="first")
```

```{r}
ord <- order( res$padj )
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

## 9. Data Visualization

Volcano plots are a common way to view RNA-Seq data when looking for differentially expressed genes. 

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
#BiocManager::install("EnhancedVolcano")

library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```