---
title: "Class 06 - Functions in R"
author: "Ellice Wang (PID: A16882742)"
format: pdf
---

Today we will get more exposure to functions in R. We will call functions to do all our work and today we will learn how to write our own.

## A first silly function

Note that arguments 2 and 3 have default values because we set y=0 and z=0, so we don't have to supply them when we call the function.
```{r add}
add <- function(x, y=0, z=0) {
  x+y
}
```

```{r}
add(1,1)
add(1,c(10,100))
```

```{r}
add(100)
```

```{r}
add(100,10,5)
```

## A second more fun function

Let's write a function that genereates random nucleotide sequences. 

We can make use of the in-built 'sample()' function in R to help us here. 

```{r}
sample(x=1:10, size=11, replace=T)
```

> Q. Can you use 'sample()' to generate a random nucleotide sequence of length 5.

```{r random_nt}
sample(x=c('A', 'T', 'C', 'G'), size=5, replace=T)
```

> Q. Generate a function 'generate_dna()' that makes a nucleotide sequence of a user defined length

Every function in R has at least 3 things:

- a **name** (in our case 'generate_dna')
- one or more **input arguments** (length of sequence we want)
- a **body** (R code that does the work)

```{r}
generate_dna <- function(dna_len=5) {
  sample(x=c("A", "T", "C", "G"), size=dna_len, replace=TRUE)
}

# test to see if the function works
generate_dna(50)
```

> Q. Can you write a 'generate_protein()' function that returns amino acid sequence of a user requeseted length?

> 'install.packages("bio3d")'

```{r}
# aa_codes <- c("C", "Q", "N", "T", "S", "G", "A", "P", "M", "I", "L", "V",
#               "F", "Y", "W", "D", "E", "H", "K", "R")

# instead of typing out all of the amino acids, can you the bio3d shortcut
generate_protein <- function(protein_len=5){
  aa_codes <- bio3d::aa.table$aa1[1:20]
  paste(sample(aa_codes, protein_len, replace = TRUE), collapse="")
}

# check to see if it works; random length of 30
generate_protein(30)
```

want output to be a concatenated string not a vector with one amino acid per element

```{r}
bases <- c("A", "G", "C", "T")
paste(bases, collapse="")
```

> Q. Generate protein sequences from length 6 to 12?

We can use the useful utility function 'sapply()' to help us "apply" our function over all the values 6 to 12

```{r}
ans <- sapply(6:12, generate_protein)

cat(paste(">ID", 6:12, sep="", "\n", ans, "\n"))
```
> Q. Are any of these sequences unique in nature? - i.e. never found in nature. We can search "refseq-protein" and look for 100% Identity and 100% coverage matcheswith BLASTPp

Some of these sequences are found in nature. "AFELCW" mapped to different proteins like: dynein heavy chain [Kickxella alabastrina], leucine-rich repeat protein [Paraprevotella xylaniphila], among others. "FRRIAFM" mapped to multiple proteins like: receptor-type adenylate cyclase a [Leishmania major strain Friedlin], 

# R Functions Lab
> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r grade}
grade <- function(assignment_vector) {
  min_score <- assignment_vector 
}
```

