---
title: "Class 8: Mini-Project"
author: "Ellice Wang (PID: A16882742)"
date: January 31, 2025
format: pdf
---

Today we will do a complete analysis of some breast cancer biopsy data but first let's revist the main PCA function in R 'prcomp()' and see what 'scale=TRUE/FALSE' does.

```{r}
head(mtcars)
```

Find the mean value per column of this dataset

```{r}
apply(mtcars, 2, sd)
```

It is clear that "disp" and "hp" have the highest mean values and the highest standard deviation. They will likely dominate any analysis I do on this dataset. Let's see. 

```{r}
pc.noscale <- prcomp(mtcars)
pc.scale <- prcomp(mtcars, scale=TRUE)
```

```{r}
biplot(pc.noscale)
```
```{r}
library(ggplot2)

r1 <- as.data.frame(pc.noscale$rotation)
r1$names <- rownames(pc.noscale$rotation)

ggplot(r1) + aes(PC1, names) + geom_col()
```

```{r}
r2 <- as.data.frame(pc.scale$rotation)
r2$names <- rownames(pc.scale$rotation)

ggplot(r2) + aes(PC1, names) + geom_col()
```

```{r}
biplot(pc.scale)
```

> **Take-home**: Generally we always want to set 'scale=TRUE' when we do this type of analysis to avoid our analysis being dominated by individual variables with the largest variance just due to their unit of measurement. 

## FNA breast cancer data

Load the data into R

Remove the diagnosis column since it already tells us whether a sample is cancer or non-cancer

```{r}
# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv("WisconsinCancer.csv", row.names=1)
head(wisc.df)

# remove diagnosis column and save as a factor 
wisc.data <- wisc.df[,-1]
diagnosis <- as.factor(wisc.df$diagnosis)
```

> Q1. How many observations are in this dataset? \
There are 569 individuals in this dataset. 

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis? \ 
There are 212 individuals who have a malignant diagnosis

```{r}
length(grep("M", wisc.df$diagnosis))

# using table
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with _mean? \
There are 10 variables in the data suffixed with _mean

```{r}
length(grep("_mean", colnames(wisc.df)))
# check look at dataset
head(wisc.df[(grep("_mean", colnames(wisc.df)))])
```

Let's see if we can cluster the 'wic.data' to find some structure in the dataset.

```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```


```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

```{r}
# Perform PCA
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```

```{r}
biplot(wisc.pr)
```

This biplot sucks! Wee need to build our own PCA score plot of PC1 vs PC2

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)? \
44% of the original variance is captured by the first PC. 

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data? \
3 principle components are required to describe at least 70% of the original variance in the data

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data? \
7 principle components are required to describe at least 90% of the original variance in the data

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why? \
It is not easy to understand. The data are all clustered together and none of the observations can be distinguishable. 

```{r}
attributes(wisc.pr)
```
```{r}
head(wisc.pr$x)
```

Plot PC1 vs PC2 the first 2 columns

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, 
      xlab = "PC1", ylab = "PC2")
```

```{r}
pc <- as.data.frame(wisc.pr$x)

ggplot(pc) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots? \
These plots look relatively similar to the plot for PC1 vs PC2, though there seems to be a bit more overlap between the malignant & benign datapoints in PC1 vs PC3. 

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis, 
      xlab = "PC1", ylab = "PC3")
```

### Variance Explained

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```


```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? \
The component of the loading vector for feature concave.points_mean is -0.2608538.

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data? \
The minimum number of principle components required to explain 80% of the variance is 5. 

```{r}
min_num <- sum(cumsum(pve) < 0.8) + 1
sum(pve[1:min_num]) >= 0.8
print(min_num)
```

## Hierarchical Clustering

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?\
At a height of 19, the clustering model has 4 clusters. 

```{r}
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist, "complete")
```

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)

table(wisc.hclust.clusters, diagnosis)
```
> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? \
There are not better cluster vs diagnoses matches by cutting into different numbers of clusters. As the cluster numbers increase, there are less observations that exist within the cluster. For example, using a cluster number of 7, cluster 1 and 3 still largely corresponds with malignant and benign, respectively, but the rest of the clusters have little data associated. There are still quite a bit of false positives and negatives within those clusters with higher numbers. 

```{r}
for (i in c(2:10)){
  name = paste("cluster", i, sep="_")
  print(name)
  print(table(cutree(wisc.hclust, k=i), diagnosis))
}
```

> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.\
I quite like the results from "ward.D2" and "mcquitty" since they give less false results than the other methods. For cluster 1, the "ward.D2" method gave me no false negatives while some other methods gave over 300. 

```{r complete}
methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty",
             "median", "centroid")
for (method in methods){
  wisc.hclust <- hclust(data.dist, method)
  clustered <- cutree(wisc.hclust, k=4)
  print(method)
  print(table(clustered, diagnosis))
}
```
## Clustering in PC Space

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:2]), method="ward.D2")
plot(wisc.pr.hclust)
abline(h=70, col="red")
```

Cluster membership vector

```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```
Cross-table to see how my clustering groups correspond to the expert dianosis vector of M and B values

```{r}
table(grps, diagnosis)
```


```{r}
g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses? \
The newly created model with 4 clusters separates out the benign and amlignant diagnoses decently. Cluster 1 has no false negatives, and cluster 2 only has 2 false negatives. However cluster 3, gives 26 false negatives which is not great.  


```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=4)
table(wisc.pr.hclust.clusters, diagnosis)
```
> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses. \
The hierarchical clustering model and k-means model performs quite similarly to each other. The hierarchical clustering model does not have any false negatives associated with its first cluster and around the same amount of false results as the k-means model. However both models capture quite a bit of false results. 

```{r}
wisc.km <- kmeans(dist(scale(wisc.data)), 4)
km_result <- table(wisc.km$cluster, diagnosis)

wisc.hclust <- hclust(dist(scale(wisc.data)), "ward.D2")
hclustered <- cutree(wisc.hclust, k=4)
hclust_result <- table(hclustered, diagnosis)

km_result
hclust_result
```

> Q17. Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity? \
K-means producted a more sensitive model while hierarchical clustering produced a more specific model. 

```{r}
sens_km <- (51+126+6)/(212)
sens_hclust <- (115+48)/(212)

spec_km <- (326)/357
spec_hclust <- (337+14)/357

print("sensitivity")
sens_km
sens_hclust
print("specificity")
spec_km
spec_hclust
```

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results? \
I would prioritize following up with patient 1 because their sample is more aligned with the previously clustered malignant cancer cells. 


```{r}
sessionInfo()
```




